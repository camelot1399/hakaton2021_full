import _defineProperty from "@babel/runtime/helpers/defineProperty";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

import { noop } from "../lib/utils";
import { useCallback, useEffect, useRef } from 'react';
import { canUseDOM } from "../lib/dom";
import { useIsomorphicLayoutEffect } from "../lib/useIsomorphicLayoutEffect";
export function useEventListener(event, _cb, _options) {
  var cbRef = useRef(_cb);
  useIsomorphicLayoutEffect(function () {
    cbRef.current = _cb;
  }, [_cb]);
  var cb = useCallback(function (e) {
    return cbRef.current(e);
  }, []);
  var detach = useRef(noop);
  var remove = useCallback(function () {
    return detach.current();
  }, []);
  var add = useCallback(function (el) {
    if (!canUseDOM) {
      return;
    }

    remove();

    var options = _objectSpread({}, _options);

    el.addEventListener(event, cb, options);

    detach.current = function () {
      el.removeEventListener(event, cb, options);
      detach.current = noop;
    };
  }, []);
  useEffect(function () {
    return remove;
  }, []);
  return {
    add: add,
    remove: remove
  };
}
//# sourceMappingURL=useEventListener.js.map