"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _jsxRuntime = require("../../lib/jsxRuntime");

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _typeof2 = _interopRequireDefault(require("@babel/runtime/helpers/typeof"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _react = _interopRequireWildcard(require("react"));

var _classNames = require("../../lib/classNames");

var _getClassName = require("../../helpers/getClassName");

var _reactDom = _interopRequireDefault(require("react-dom"));

var _dom = require("../../lib/dom");

var _useIsomorphicLayoutEffect = require("../../lib/useIsomorphicLayoutEffect");

var _Subhead = _interopRequireDefault(require("../Typography/Subhead/Subhead"));

var _TooltipContainer = require("./TooltipContainer");

var _useExternRef = require("../../hooks/useExternRef");

var _useGlobalEventListener = require("../../hooks/useGlobalEventListener");

var _warnOnce = require("../../lib/warnOnce");

var _utils = require("../../lib/utils");

var isDOMTypeElement = function isDOMTypeElement(element) {
  return /*#__PURE__*/_react.default.isValidElement(element) && typeof element.type === 'string';
};

var baseClassName = (0, _getClassName.getClassName)('Tooltip');
var warn = (0, _warnOnce.warnOnce)('Tooltip');
var IS_DEV = process.env.NODE_ENV === 'development';

var TooltipPortal = function TooltipPortal(_ref) {
  var header = _ref.header,
      text = _ref.text,
      offsetX = _ref.offsetX,
      offsetY = _ref.offsetY,
      alignX = _ref.alignX,
      alignY = _ref.alignY,
      cornerOffset = _ref.cornerOffset,
      mode = _ref.mode,
      target = _ref.target,
      onClose = _ref.onClose;

  var _useState = (0, _react.useState)({
    x: 0,
    y: 0
  }),
      _useState2 = (0, _slicedToArray2.default)(_useState, 2),
      pos = _useState2[0],
      setPos = _useState2[1];

  var containerRef = (0, _react.useRef)();

  var _useDOM = (0, _dom.useDOM)(),
      document = _useDOM.document;
  /* eslint-disable no-restricted-properties */


  var fixedPortal = (0, _react.useMemo)(function () {
    return target.closest("[".concat(_TooltipContainer.tooltipContainerAttr, "=fixed]")) != null;
  }, [target]);
  var portalTarget = (0, _react.useMemo)(function () {
    return target.closest("[".concat(_TooltipContainer.tooltipContainerAttr, "]"));
  }, [target]);
  /* eslint-enable no-restricted-properties */

  if (IS_DEV && !portalTarget) {
    throw new Error('Use TooltipContainer for Tooltip outside Panel (see docs)');
  }

  (0, _useGlobalEventListener.useGlobalEventListener)(document, 'click', onClose);
  (0, _useIsomorphicLayoutEffect.useIsomorphicLayoutEffect)(function () {
    var container = containerRef.current;
    var targetBounds = target.getBoundingClientRect();
    var portalBounds = portalTarget.getBoundingClientRect();
    var coords = {
      width: targetBounds.width,
      height: targetBounds.height,
      x: targetBounds.left - portalBounds.left,
      y: targetBounds.top - portalBounds.top
    };
    setPos({
      x: coords.x + offsetX + (alignX === 'right' ? coords.width - container.offsetWidth : 0),
      y: coords.y + (alignY === 'top' ? -container.offsetHeight - offsetY : coords.height + offsetY)
    });
  }, [target, portalTarget]);
  return /*#__PURE__*/_reactDom.default.createPortal((0, _jsxRuntime.createScopedElement)("div", {
    vkuiClass: (0, _classNames.classNames)(baseClassName, "Tooltip--x-".concat(alignX), "Tooltip--y-".concat(alignY), "Tooltip--".concat(mode), {
      'Tooltip--fixed': fixedPortal
    })
  }, (0, _jsxRuntime.createScopedElement)("div", {
    vkuiClass: "Tooltip__container",
    style: {
      top: pos.y,
      left: pos.x
    },
    ref: containerRef
  }, (0, _jsxRuntime.createScopedElement)("div", {
    vkuiClass: "Tooltip__corner",
    style: (0, _defineProperty2.default)({}, alignX, 20 + cornerOffset)
  }), (0, _jsxRuntime.createScopedElement)("div", {
    vkuiClass: "Tooltip__content"
  }, header && (0, _jsxRuntime.createScopedElement)(_Subhead.default, {
    weight: "semibold",
    vkuiClass: "Tooltip__title"
  }, header), text && (0, _jsxRuntime.createScopedElement)(_Subhead.default, {
    weight: "regular",
    vkuiClass: "Tooltip__text"
  }, text)))), portalTarget);
};

var Tooltip = function Tooltip(_ref3) {
  var _ref3$children = _ref3.children,
      children = _ref3$children === void 0 ? null : _ref3$children,
      isShown = _ref3.isShown,
      portalProps = (0, _objectWithoutProperties2.default)(_ref3, ["children", "isShown"]);

  var _useState3 = (0, _react.useState)(),
      _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
      target = _useState4[0],
      setTarget = _useState4[1];

  if (IS_DEV) {
    var multiChildren = _react.Children.count(children) > 1; // Empty children is a noop

    var primitiveChild = (0, _utils.hasReactNode)(children) && (0, _typeof2.default)(children) !== 'object';
    (multiChildren || primitiveChild) && warn(['children must be a single React element, got', multiChildren && 'multiple', primitiveChild && JSON.stringify(children)].filter(Boolean).join(' '));
  }

  var childRef = /*#__PURE__*/(0, _react.isValidElement)(children) && (isDOMTypeElement(children) ? children.ref : children.props.getRootRef);
  var patchedRef = (0, _useExternRef.useExternRef)(setTarget, childRef);
  var child = /*#__PURE__*/(0, _react.isValidElement)(children) ? /*#__PURE__*/(0, _react.cloneElement)(children, (0, _defineProperty2.default)({}, isDOMTypeElement(children) ? 'ref' : 'getRootRef', patchedRef)) : children;
  return (0, _jsxRuntime.createScopedElement)(_react.Fragment, null, child, isShown && target != null && (0, _jsxRuntime.createScopedElement)(TooltipPortal, (0, _extends2.default)({}, portalProps, {
    target: target
  })));
};

Tooltip.defaultProps = {
  offsetX: 0,
  offsetY: 15,
  alignX: 'left',
  alignY: 'bottom',
  cornerOffset: 0,
  isShown: true,
  mode: 'accent'
};
var _default = Tooltip;
exports.default = _default;
//# sourceMappingURL=Tooltip.js.map